#+TITLE: React Paradigms in Practice
#+AUTHOR: Kyle
#+EMAIL: kyle@codesignal.com
#+LANGUAGE: en
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc H:4 num:nil
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+SETUPFILE: theme-readtheorg.setup
#+EXPORT_FILE_NAME: index.html

#+BEGIN_COMMENT
Trying to find ways to add styling here. it's a bit tricky
Potential leads: [[https://github.com/fniessen/org-html-themes#readtheorg][readtheorg]]
also have older bootstrap2 base site, [[http://renard.github.io/o-blog/index.html][oblog]]

reference card for org mode [[https://github.com/fniessen/refcard-org-mode][refcard]]

[[https://codersblock.com/blog/customizing-github-gists/][styling github gists]]
[[https://lonekorean.github.io/gist-syntax-themes/][direct link to gist-syntax-themes]]

Html elements can be embedded inside of a #+BEGIN_EXPORT html and #+END_EXPORT block

specific ids for css targetting can be applied to sections with the following blocks:

//- Some Section Header
//- :PROPERTIES:
//- :CUSTOM_ID: customIdForCss
//- :END:

#+END_COMMENT

* React Components
** Paradigms 
*** Introduction and Overview
    Here's a quick video discussion about the major patterns of React components that we'll be exploring.
#+BEGIN_EXPORT html
<div class="container-fluid">
  <div class="row">
    <div class="col-12 col-md-offset-1 col-md-10 col-lg-offset-2 col-lg-8">
      <div class="embed-responsive embed-responsive-16by9">
        <iframe class="embed-responsive-item" src="https://www.youtube.com/embed/YaZg8wg39QQ?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
      </div>
    </div>
  </div>
</div>
#+END_EXPORT
*** Functional Component (Pure Component)
**** No state, no side effects, just rendering. Choose your favorite flavor.


#+NAME: Functional Component Example
#+BEGIN_SRC js -n :exports (when (eq org-export-current-backend 'html) "none")
import React from 'react';
const Box = ({color}) => (
  <div
    style={{
      backgroundColor: color || 'green',
      height: '10px',
      width: '10px'
    }}
  />
);
#+END_SRC

#+NAME: PureComponent Example
#+BEGIN_SRC js -n :exports (when (eq org-export-current-backend 'html) "none")
import * as React from 'react';

class Box extends React.PureComponent {
  render() {
    return (
      <div
        style={{
          backgroundColor: color || 'green',
          height: '10px',
          width: '10px'
        }}
      />
    );
  }
}
#+END_SRC

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/5653ba87024fd37b3a0d8785b10b7194.js"></script>
#+END_EXPORT

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/ef1d0598b609a3f60a690eb3b5061402.js"></script>
#+END_EXPORT

**** What is ~PureComponent~?
A React Component's ~shouldComponentUpdate~ method is defaulted to ~return true~, as this method exists to give the developer a means of improving component performance on a case by case basis. PureComponent has this defaulted
to a shallow comparison of props and state, which is largely what you would want in a component that acts like a function (same input, same output). Using Pure Component can improve performance by preventing unnecessary rendering of react components.

**** Still some discussion about usage
There are some [[https://hackernoon.com/react-stateless-functional-components-nine-wins-you-might-have-overlooked-997b0d933][benefits]] and [[https://medium.freecodecamp.org/7-reasons-to-outlaw-reacts-functional-components-ff5b5ae09b7c][drawbacks]]

Quick summary about Functional Components:
- Easy to test
- Easy to read
- Provide no efficiency under the hood, React still creates the class that you didn't
- Conversions to PureComponent (the efficient version) look noisy in Diff viewers as you have to add class boilerplate
- The React Team has plans to make Functional Components implement PureComponent by default.

**** Additional Resources
- [[https://reactjs.org/docs/react-api.html#reactpurecomponent][Pure Component]] in the React Documentation
- [[https://www.youtube.com/watch?v=Lx0AE-mhNlg][Quick tutorial about functional components]]
- [[https://www.youtube.com/watch?v=40Bq8kOKB74][A quick comparison of shouldComponentUpdate and PureComponent]]

**** A note on Presentational Components (Spoiler alert: It's just a View)
[[https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0][Dan Abramov]] strongly suggests separating Functional (Presentational) Components and Controller components. 
The distinction is usually drawn along the lines of [[https://medium.com/@yassimortensen/container-vs-presentational-components-in-react-8eea956e1cea][presentational components organizing the view]], 
while the container component may load or organize data. So if you use Functional Components as views in
MVC, you're in good form!

Sometimes you have complex structures that would be served well by having a layout view component. This would
look something like the following:

#+BEGIN_SRC js -n :exports (when (eq org-export-current-backend 'html) "none")
const MainDisplay = ({header, sidebar, leftColumn, rightColumn}) => (
  <div className="app">
    <div className="header">
      {header}
    </div>
    <div className="sidebar">
      {sidebar}
    </div>
    <div className="main-content">
      <div className="leftColumn">
        {leftColumn}
      </div>
      <div className="rightColumn">
        {rightColumn}
      </div>
    </div>
  </div>
);
#+END_SRC

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/3e6acbd907fb10349487b96fca278314.js"></script>
#+END_EXPORT


*** Controller Component
**** Can have state, bind functions, organize layouts
**** It loads data. It might send it to view components. It hooks into the lifecycle methods to get the job done
     
 #+BEGIN_SRC js -n :exports (when (eq org-export-current-backend 'html) "none")
 import * as React from 'react';

 class ColorBox extends React.Component {
   componentDidMount() {
     this.getColors();
   }

   getColors = async () => {
     const colors = await axios.get('https://color.api/random');
     this.setState({colors});
   }

   render() {
     return (
       <div>
         {this.state.colors.forEach(color => (<Box key={color} color={color} />))}
         <button type="button" onClick={this.getColors}>New Colors</button>
       </div>
     );
   }
 }

 #+END_SRC

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/f8f73aaafa003c6991355e8a5eb59ee2.js"></script>
#+END_EXPORT

*** Higher Order Component
**** Provides additional functionality to the component(s) that are wrapped
**** Structure: ~const HoC = config => BaseComponent => EnhancedComponent~
#+BEGIN_SRC js -n :exports (when (eq org-export-current-backend 'html) "none")
// connect: The HoC we know and love
import { connect } from 'react-redux';

const AwareComponent = connect(getCurrentUser)(Component);

// Making a new Higher Order Component that binds some props

// This function takes a component...
function propBinder(WrappedComponent, propsToBind) {
  // ...and returns another component...
  return class extends React.Component {
    render() {
      // Notice that we pass through any additional props
      return <WrappedComponent {...this.props} {...propsToBind} />;
    }
  };
}

const AlertButton = propBinder(Button, {
  type: 'alert',
  size: '24',
  case: 'none',
  fontSize: '14',
  className: '-margin-h-8'
});


// A version using lambdas
const propBinder2 = propsToBind => WrappedComponent =>
  (props) => <WrappedComponent {...props} {...propsToBind} />;

const AlertButton2 = propBinder2({
  type: 'alert',
  size: '24',
  case: 'none',
  fontSize: '14',
  className: '-margin-h-8'
})(Button);
#+END_SRC

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/9094c3004bf5d619ca0f1d75440d5e9c.js"></script>
#+END_EXPORT

**** Separating logic from containers can help improve your code
- Containers can worry less about its data loading, management, or connecting to application state management when that functionality is added via an HoC.
- Enables you to share functionality between components, as the HoCs exist independent of the components they are applied to.
- Can make using components more difficult, as you need to look at the ~connect~ function to see what props are being passed by Redux and what props are required to be given to the component.
- Adds some visual complexity, as now your app has logic being added to compoennts by a function call, which doesn't look very "jsx"-y. You need to hunt down bugs tracking both through layers of JSX and layers of HoCs.

**** The React team has certain suggestions about how to implement HoCs 
- Don't [[https://reactjs.org/docs/higher-order-components.html#dont-mutate-the-original-component-use-composition][modify the functions of the wrapped component]]
- HoCs should support [[https://reactjs.org/docs/higher-order-components.html#convention-pass-unrelated-props-through-to-the-wrapped-component][passthrough of unrelated props]]
- Use the [[https://reactjs.org/docs/higher-order-components.html#convention-maximizing-composability][HoC thunk pattern to support composition]] , which just means you have the parenthesis ~connect(config)(Component)~ instead of ~connect(config, Component)~
  - This allows for clear distinction of the component and argmuments when applying multiple HoCs

**** Additional Resources
- [[https://reactjs.org/docs/higher-order-components.html][Higher Order Components]] in the React Documentation
- An [[https://www.robinwieruch.de/gentle-introduction-higher-order-components/][introduction to HoCs]]
- A tutorial on HoCs [[https://levelup.gitconnected.com/understanding-react-higher-order-components-by-example-95e8c47c8006][by example]]
- The self-purported [[https://medium.freecodecamp.org/higher-order-components-the-ultimate-guide-b453a68bb851][Ultimate Guide to HoCs]]

*** Render Props
**** Share functionality between components
Here we have a Toggle Render Prop which allows us to share the state of 'on' and a functin to modify that state. Anywhere we need that functionality we can use this Toggle, meaning that we can re-use this state logic!

#+BEGIN_SRC js -n :exports (when (eq org-export-current-backend 'html) "none")
const Button = () => (
  <Toggle>
    {({on, toggle}) => (
      <button type="button" onClick={toggle}>
        Turn {on ? 'Off' : 'On'}
      </button>
    )}
  </Toggle>
);

// Defining a Toggle Render Prop

type RenderPropArgs = {
  on: boolean,
  toggle: () => *
};

type Props = { children: React.ComponentType<RenderPropArgs> };
type State = { on: boolean };

class Toggle extends React.Component<Props, State> {
  state = {
    on: false
  };

  toggle = () => this.setState(({on}) => ({on: !on}));

  render() {
    return this.props.children({
      on: this.state.on,
      toggle: this.toggle
    });
  }
}
#+END_SRC

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/e7ebfcdae62e2b796a56909578072236.js"></script>
#+END_EXPORT

**** What exactly do Render Props do for you?
- Share *functionality* between components
  - The component parts that were _boilerplate_ before can now be re-used!
  - Ever had a component that loads data on mounting, reloads on specific props changes?
  - Maybe it also has a loading state?
  - Stay tuned for some examples of how to use these concepts to re-use code to address these problems!
- Represent a way of utilizing [[https://medium.com/byteconf/render-props-in-react-6081b6fa3593][depencency injection]] in combining components
  - A ~List~ container could know nothing about how each ~ListItem~ is displayed
  - You can skip the component creation steps required in HoCs, as Render Props are defined at their usage.
- But make sure you know [[https://blog.kentcdodds.com/when-to-not-use-render-props-5397bbeff746][why you are using a Render Prop]]

**** Some things to note

React does not assign meaning to passing a function as ~children~ (a function is not a React.Node type). This is awesome! It means that we can co-opt that usage of children for Render Props.
Instead of defining a prop ~render~ or ~component~ being how the function is passed, you can instead pass the function in as the ~children~ prop.
This keeps code that uses Render Props clean and expressive, as you'll see later on. The React Team themselves have
embraced this paradign in the [[https://reactjs.org/docs/context.html][React Context API]], which uses Render Props to provide an easy interface to avoid 
passing props through multiple layers of components (commonly known as [[https://itnext.io/compound-components-with-react-v16-3-6679c752bd56][prop drilling]]).

Render Props and Higher Order Components ultimately achieve the same thing in different ways. Higher Order Components add functionality to the component but can obscure it behind exports. You'll see this with Redux when we export the connected component, ~export default connect(getCurrentUser)(Header)~. This can reduce reusability and make testing more difficult, as you either mock the HoC or export both the unconnected and connected versions of the component.

Render Props have drawbacks as well, as they define added functionality in-line, which means adding some complexity to the jsx portions. This is located next to the usage, so you have the choice of where you will look to track down bugs. With HoCs, you'll be looking for the definitions of wrapped components to see what is added. With Render Props, you'll be looking in-line in the jsx.

Unrelated, [[https://medium.com/@pshrmn/dont-call-it-a-render-prop-810b80b9c5c5][some people]] are mad about the name Render Prop, but 'function as a child' is not a great
alternative name. There are [[https://americanexpress.io/faccs-are-an-antipattern/][concerns]] about how having ~children~ be a renderable component does not follow good
naming conventions, as ~return this.props.children()~ does not make a lot of sense from how things are named. If
you agree, you could consider renaming the children prop. This does create a class as jsx is being used, so only
do this if you *really* disagree with calling children as a function.

#+BEGIN_SRC js -n :exports (when (eq org-export-current-backend 'html) "none")
// ... Pretend we're in a class
render() {
  const { children: View } = this.props;
  return <View {...this.state} />
}
#+END_SRC

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/92ebf76634ccbd36cb39b193c526c25c.js"></script>
#+END_EXPORT

**** Additional Resources
- [[https://hackernoon.com/do-more-with-less-using-render-props-de5bcdfbe74c][Introduction to Render Props]] and why they are useful
- [[https://reactjs.org/docs/render-props.html][Render Props]] in the React documentation

** How Can We Leverage These?
*** Let's check out some useful pre-made Render Props from React-Powerplug
**** [[https://github.com/renatorib/react-powerplug/blob/master/docs/components/Hover.md][Hover]]
Lets you easily use the hover state on the component.

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/818e3be527a51dec06e582443618eea0.js"></script>
#+END_EXPORT
**** [[https://github.com/renatorib/react-powerplug/blob/master/docs/components/Value.md][Value]]
Store whatever value you want, no need to define state! Oh yea, this Render Prop takes in an ~onChange~ callback,
so you can keep track of what's going on. Ever wanted input text to control the text of another component? Well then maybe this the tool for you!

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/49bf82cba73efc4a4e2a011a8b7c7676.js"></script>
#+END_EXPORT
**** [[https://github.com/renatorib/react-powerplug/blob/master/docs/components/List.md][List]]
Ever wanted an easy way to manipulate a list that's stored in state? Well here's an abstracted way to do that!
List also takes a ~onChange~ callback, meaning you can keep your code squeeky clean and still manipulate that list.

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/13ff5d09c1da5ebeeba7789bfc5a7566.js"></script>
#+END_EXPORT

**** [[https://github.com/renatorib/react-powerplug/blob/master/docs/components/State.md][State]]
For when you want to throw the kitchen sink at your problem. If you wanted state... just write a class. But
React-Powerplug won't judge you if you use this.

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/734cce3fc9ffa76ab4dfad5871b50847.js"></script>
#+END_EXPORT

*** Use Case: Using an Accordion
Sometimes you have a controlled component that you'd rather were uncontrolled, and a handy Render Prop could give the functionality you need in-line.

Defining your own state? Who needs it! We've got Render Props to share the logic, letting us code even faster.
#+BEGIN_SRC js -n :exports (when (eq org-export-current-backend 'html) "none")
import * as React from 'react';

import Accordion from './Accordion';
import Toggle from './Toggle';

const Description = ({onSubmit}) => (
  <div className="-space-v-8">
    <div className="-blue-grey-40">Add your details below</div>
    <Toggle>
      {({on, toggle}) => (
        <Accordion
          state={on ? 'selected' : ''}
          onChange={toggle}  
        >
          <form onSubmit={onSubmit}>
            <input name="details" type="text" />
            <button type="submit">Submit</button>
          </form>
        </Accordion>
      )}
    </Toggle>
  </div>
);
#+END_SRC

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/283b1cf53d9daa444486019e6535c94e.js"></script>
#+END_EXPORT


*** Data Loading
    
**** Wouldn't it be nice if there were some sort of ~Loader~ component?
Something that handled loading data on mounting, loading when relevant props change, setting a loading state, and handling errors? Something that could be used like this:
#+BEGIN_SRC js -n :exports (when (eq org-export-current-backend 'html) "none")
function HandyHeader = ({userId}) => (
  <Loader args={[userId]} load={methodService.run.bind(null, 'userService.grabSomething')}>
    {({data, errors, loading}) => {
      if (loading) {
        return <Loading />;
      }
      if (errors) {
        return <div>Whoops: {errors}</div>;
      }
      return (
        <div>
          <Label>Heres that user specific data you asked for</Label>
          <DataVisualizer data={data} />
        </div>
      );
    }}
  </Loader>
);

const HoCHeader = loader({method: 'userService.grabSomething'})(Header);

const Page = ({userId}) => (
  <div>
    <HoCHeader args={userId} /> // Header is responsible for knowing what props the HoC gives it.
    <Body />
  </div>
);
#+END_SRC

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/38454d47dc01f0ce0a21d107a07884b4.js"></script>
#+END_EXPORT
**** Let's look at an HoC implementation of Loader first
The HoC has a pre-determined target for what will be modified by the values

#+BEGIN_SRC js -n :exports (when (eq org-export-current-backend 'html) "none")
import { hasArrayChanged } from 'array-utils';

class loader = config => Component =>
  class LoaderHoC extends React.Component {
    state = {
      loading: false,
      errors: null,
      data: null,
    };

    componentDidMount() {
      this.loadData();
    }

    componentDidUpdate(prevProps) {
      if (hasArrayChanged(this.props.args, prevProps.args)) {
        this.loadData();
      }
    }


    loadData = async () => {
      this.setState({loading: true});
      try {
        const data = await this.props.load(...this.props.args);
        const this.setState({ data, loading: false, errors: null});
      } catch (err: *) {
        this.setState({data: null, loading: false, errors: err});
      } 
    };

    render() {
      const {args, ...passThrough} = this.props;
      return <Component {...passThrough} {...this.state} />
    }
  }
#+END_SRC

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/7f702f99b72ffcb3abec8c610229e36e.js"></script>
#+END_EXPORT

**** And here's a  Render Props version of Loader
Render Props allows you to stay flexible and have an indeterminate target, ~children~. Looks very similar in implementation to the HoC, as they both provide ways to share logic!

#+BEGIN_SRC js -n :exports (when (eq org-export-current-backend 'html) "none")
import { hasArrayChanged } from 'array-utils';

type RenderPropArgs<T> = {loading: boolean, data: T, errors: *};

type Props<G, T> = {args: G, load: (...args: G) => Promise<T>, children: React.ComponentType<RenderPropArgs<T>>};

type State<T> = {
  data: T,
  loading: boolean,
  errors: *,
};

class Loader<G, T> extends React.Component<Props<G, T>, State<T>> {
  state = { data: null, errors: null, loading: false };

  componentDidMount() {
    this.loadData();
  }

  componentDidUpdate(prevProps) {
    if (hasArrayChanged(this.props.args, prevProps.args)) {
      this.loadData();
    }
  }

  loadData = async () => {
    this.setState({loading: true});
    try {
      const data = await this.props.load(...this.props.args);
      const this.setState({ data, loading: false, errors: null});
    } catch (err: *) {
      this.setState({data: null, loading: false, errors: err});
    } 
  };

  render() {
    return this.props.children({...this.state});
  }
}
#+END_SRC

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/39edd9b88e76ec9d138bc170c5eefeae.js"></script>
#+END_EXPORT

*** Package to help get ideas about how to use Render Props
**** [[https://github.com/renatorib/react-powerplug][React-Powerplug]]
     It's only 3kb minified! Has many more great Render Props than just the few examples from above.
**** [[https://github.com/jaredpalmer/awesome-react-render-props][List of Render Props Packages]]
     Here is a collection of public packages that leverage Render Props to get the job done. Even if you don't want to write some Render Props yourself, it pays to know the structure as many community packages rely upon it.
* Flexible Layouts with Context API and Render Props
#+BEGIN_COMMENT
--*** Binding callbacks
--There are a few articles about [[https://medium.freecodecamp.org/react-binding-patterns-5-approaches-for-handling-this-92c651b5af56][how to address this.]] The quick answer is to avoid in-line lambdas for performance reason, and to use class properties.
--
--#+BEGIN_SRC js -n :exports (when (eq org-export-current-backend 'html) "none")
--class Component extends React.Component {
--  message = 'Harumph';
--
--  onClick = () => console.log('Hear my message: ', this.message);
--
--  render() {
--    return (
--      <button type="button" onClick={this.onClick}>Click me!</button>
--    );
--  }
--}
--#+END_SRC
--
--#+BEGIN_EXPORT html
--<script src="https://gist.github.com/ksaxberg/fdaa9ba95f1983f7ae8fc749162f368c.js"></script>
--#+END_EXPORT

--*** Gotchas and performance concerns [[https://flexport.engineering/optimizing-react-rendering-part-1-9634469dca02][in an article by Flexport]]
#+END_COMMENT
*** How should component data flow be organized to allow flexibility with [[https://itnext.io/using-advanced-design-patterns-to-create-flexible-and-reusable-react-components-part-3-render-d7517dfe72bc][Render Props]] or with [[https://itnext.io/using-advanced-design-patterns-to-create-flexible-and-reusable-react-components-part-2-react-3c5662b997ab][Context API]]
If the view is always defined statically, there is little flexibility for re-use. At some point you may want to be
able to reuse some code, but shuffle around how the components are being displayed. If the view is defined rigidly, you
would either need to create a whole new view for the component or add flags that allow you to switch between layouts.

But wouldn't it be nice if there were a simple, high level way of re-organizing the view that removes data-flow
concerns? Let's explore ways to utilize React Context and Render Props to add flexibility to your React App
where you may not have thought there was room for any.

*** Wouldn't it be nice to have this kind of flexibility?
One option is to use render props to pass the needed props to the children components, however this would only look nice in simple cases. In complex cases, you'd just be expanding props into every child that you need to render like this, which is just more boilerplate / noise. 

So let's not use render props in our goal-syntax, and instead create something that takes in props at the top level, and allows us to place some view components wherever we want them underneath. This keeps our layout definition nice and clear, and we know that props are 'prop'-erly making it to their final destination.

#+BEGIN_SRC js -n :exports (when (eq org-export-current-backend 'html) "none")
import CardView

const LayoutComplex = (propsForCardView) => (
  <CardView {...propsForCardView}>
    <div className="-layout-h -justify-between">
      <CardView.Avatar />
      <div className="-space-v-16">
        <CardView.Details />
        <CardView.FriendButton />
      </div>
      <CardView.ReportButton />
    </div>
  </CardView>
);

const LayoutFlat = (propsForCardView) => (
  <CardView {...propsForCardView}>
    <div className="-layout-v">
      <CardView.Avatar />
      <CardView.Details />
      <CardView.FriendButton />
      <CardView.ReportButton />
    </div>
  </CardView>
);
#+END_SRC

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/a5de86a3a4acb5167fbfa85d196d936f.js"></script>
#+END_EXPORT

*** Let's see how we can create this kind of component utilizing React's context API to allow us to skip directly passing props.

#+BEGIN_SRC js -n :exports (when (eq org-export-current-backend 'html) "none")
const Context = React.CreateContext();

class CardView extends React.Component {
  Avatar = Avatar;
  ReportButton = ReportButton;
  FriendButton = FriendButton;
  Details = Details;

  render() {
    const {children, ...restProps} = this.props;
    return (
      <Context.Provider value={restProps}>
        {this.props.children}
      </Context.Provider>
    );
  }
}


function ReportButton() {
  return (
    <Context.Consumer>
      {({onReportClick}) => (
        <button type="button" onClick={onReportClick}>Report</button>
      )}
    </Context.Consumer>
  );
}

function Avatar() {
  return (
    <Context.Consumer>
      {({userId}) => (
        <Avatar userId={userId} />
      )}
    </Context.Consumer>
  );
}

/* ... similar looking things for FriendButton and Details ... */

#+END_SRC

#+BEGIN_EXPORT html
<script src="https://gist.github.com/ksaxberg/dcaa0fc00184176382416e0e41ee150c.js"></script>
#+END_EXPORT

*** Word of caution
 The above is a little limited in re-use, as we're using a statically defined Context Provider / Consumer pair. You should be able to define the Consumer/Provider in the constructor, then injecting the consumer as a dependency to those helper components. But that's an uneeded layer of abstraction for the example above. Think of it as an exercise left to the reader!
